# ============================================
# FILE: app.py - BACKEND FLASK + OOP (PostgreSQL) - PHI√äN B·∫¢N ƒê√É S·ª¨A L·ªñI URL
# ============================================

# IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT
from flask import Flask, render_template, request, redirect, url_for, session, jsonify, flash
import os
DATABASE_URL = os.environ.get('DATABASE_URL')  # L·∫•y URL database t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (d√πng khi deploy)
import psycopg2  # Th∆∞ vi·ªán k·∫øt n·ªëi PostgreSQL
import psycopg2.extras  # Th∆∞ vi·ªán h·ªó tr·ª£ thao t√°c n√¢ng cao v·ªõi PostgreSQL
from psycopg2 import errors  # Import c√°c l·ªói c·ªßa PostgreSQL
from datetime import datetime, timedelta  # X·ª≠ l√Ω ng√†y th√°ng
from abc import ABC, abstractmethod  # T·∫°o class tr·ª´u t∆∞·ª£ng (Abstract Base Class)
from functools import wraps  # D√πng ƒë·ªÉ t·∫°o decorator
import os
from dotenv import load_dotenv 

# KH·ªûI T·∫†O ·ª®NG D·ª§NG FLASK
app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'default_fallback_key')  # Kh√≥a b√≠ m·∫≠t cho session

# ============================================
# PH·∫¶N 1: C√ÅC CLASS OOP
# ============================================

class DatabaseManager:
    """
    QU·∫¢N L√ù DATABASE (LOCAL + RENDER)
    - N·∫øu local PostgreSQL ƒëang ch·∫°y ‚Üí d√πng local (b·∫£n demo c√° nh√¢n)
    - N·∫øu local kh√¥ng m·ªü ‚Üí fallback sang Render database
    """

    LOCAL_DB_CONFIG = {
        'dbname': "library_db",
        'user': "admin",     # ho·∫∑c user b·∫°n t·∫°o
        'password': "1234",
        'host': "localhost",
        'port': "5432"
    }

    def __init__(self):
        load_dotenv()  # ƒë·ªçc DATABASE_URL t·ª´ .env
        self.DATABASE_URL = os.getenv("DATABASE_URL")
        print("üöÄ Kh·ªüi t·∫°o DatabaseManager...")
        self.active_db = None
        self.init_database()

    def get_connection(self):
        """
        ∆ØU TI√äN LOCAL ‚Üí n·∫øu l·ªói ‚Üí Render
        """
        # Th·ª≠ Local tr∆∞·ªõc
        try:
            conn = psycopg2.connect(**self.LOCAL_DB_CONFIG)
            self.active_db = "local"
            print("üíª ƒêang s·ª≠ d·ª•ng database LOCAL (demo c√° nh√¢n).")
            return conn
        except Exception as e:
            print("‚ö†Ô∏è Local DB kh√¥ng kh·∫£ d·ª•ng:", e)

        # N·∫øu Local l·ªói ‚Üí th·ª≠ Render
        try:
            if not self.DATABASE_URL:
                raise Exception("Kh√¥ng c√≥ DATABASE_URL trong .env!")
            conn = psycopg2.connect(self.DATABASE_URL, sslmode='require')
            self.active_db = "render"
            print("üåê K·∫øt n·ªëi t·ªõi Render PostgreSQL th√†nh c√¥ng!")
            return conn
        except Exception as e:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Render DB:", e)
            raise RuntimeError("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi c·∫£ Local v√† Render Database!")

    def init_database(self):
        """
        KH·ªûI T·∫†O DATABASE: T·∫°o c√°c b·∫£ng v√† d·ªØ li·ªáu m·∫´u n·∫øu ch∆∞a c√≥
        """
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            # --- T·∫†O B·∫¢NG USERS (Ng∆∞·ªùi d√πng) ---
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,                 -- ID t·ª± ƒë·ªông tƒÉng
                    username VARCHAR(100) UNIQUE NOT NULL, -- T√™n ƒëƒÉng nh·∫≠p (duy nh·∫•t)
                    password VARCHAR(100) NOT NULL,        -- M·∫≠t kh·∫©u
                    email VARCHAR(100),                    -- Email
                    role VARCHAR(50) DEFAULT 'user',       -- Vai tr√≤: 'user' ho·∫∑c 'admin'
                    points INTEGER DEFAULT 0,              -- ƒêi·ªÉm t√≠ch l≈©y
                    created_at TIMESTAMP DEFAULT NOW()     -- Ng√†y t·∫°o t√†i kho·∫£n
                )
            ''')
            
            # --- T·∫†O B·∫¢NG BOOKS (S√°ch) ---
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS books (
                    id SERIAL PRIMARY KEY,              -- ID s√°ch
                    title VARCHAR(255) NOT NULL,        -- T√™n s√°ch
                    author VARCHAR(255) NOT NULL,       -- T√°c gi·∫£
                    category VARCHAR(100) NOT NULL,     -- Th·ªÉ lo·∫°i
                    year INTEGER,                       -- NƒÉm xu·∫•t b·∫£n
                    quantity INTEGER DEFAULT 1,         -- T·ªïng s·ªë l∆∞·ª£ng
                    available INTEGER DEFAULT 1,        -- S·ªë l∆∞·ª£ng c√≥ s·∫µn ƒë·ªÉ m∆∞·ª£n
                    image_url TEXT,                     -- Link ·∫£nh b√¨a
                    description TEXT,                   -- M√¥ t·∫£ s√°ch
                    created_at TIMESTAMP DEFAULT NOW()  -- Ng√†y th√™m s√°ch
                )
            ''')

            # --- CH√àN D·ªÆ LI·ªÜU M·∫™U N·∫æU B·∫¢NG TR·ªêNG ---
            # Ki·ªÉm tra xem b·∫£ng users c√≥ d·ªØ li·ªáu ch∆∞a
            cursor.execute("SELECT COUNT(*) FROM users")
            if cursor.fetchone()[0] == 0:
                # Th√™m t√†i kho·∫£n m·∫´u: 1 admin v√† 1 user
                cursor.execute('''
                    INSERT INTO users (username, password, email, role, points)
                    VALUES 
                    ('admin', 'admin123', 'admin@library.com', 'admin', 0),
                    ('user1', 'user123', 'user1@example.com', 'user', 50)
                ''')

            # Ki·ªÉm tra xem b·∫£ng books c√≥ d·ªØ li·ªáu ch∆∞a
            cursor.execute("SELECT COUNT(*) FROM books")
            if cursor.fetchone()[0] == 0:
                # Th√™m s√°ch m·∫´u
                books = [
                    ('ƒê·∫Øc Nh√¢n T√¢m', 'Dale Carnegie', 'K·ªπ nƒÉng s·ªëng', 2020, 5, 5, 'https://i.pinimg.com/1200x/1c/22/df/1c22df7132ad8f1358688b23831e9eaf.jpg', 'S√°ch v·ªÅ k·ªπ nƒÉng giao ti·∫øp'),
                    ('Sapiens', 'Yuval Noah Harari', 'L·ªãch s·ª≠', 2018, 3, 3, 'https://i.pinimg.com/1200x/ef/68/e5/ef68e5753d6bd53fbc099c9003ad1abb.jpg', 'L·ªãch s·ª≠ lo√†i ng∆∞·ªùi'),
                ]
                cursor.executemany('''
                    INSERT INTO books (title, author, category, year, quantity, available, image_url, description)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ''', books)

            conn.commit()  # L∆∞u t·∫•t c·∫£ thay ƒë·ªïi v√†o database
            cursor.close()
            conn.close()
            print("[INFO] Database ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô th√†nh c√¥ng!")

        except Exception as e:
            print(f"[ERROR] ƒê·ªìng b·ªô database th·∫•t b·∫°i: {e}")
            if conn:
                conn.rollback()  # Ho√†n t√°c n·∫øu c√≥ l·ªói
                conn.close()


    def init_database(self):
        """
        KH·ªûI T·∫†O C√ÅC B·∫¢NG V√Ä D·ªÆ LI·ªÜU M·∫™U
        - T·∫°o 4 b·∫£ng: users, books, cart, transactions
        """
        try:
            with self.get_connection() as conn:
                with conn.cursor() as cursor:
                    # --- B·∫¢NG USERS (Ng∆∞·ªùi d√πng) ---
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS users (
                            id SERIAL PRIMARY KEY,
                            username VARCHAR(100) UNIQUE NOT NULL,
                            password VARCHAR(100) NOT NULL,
                            email VARCHAR(100),
                            role VARCHAR(50) DEFAULT 'user',
                            points INTEGER DEFAULT 0,
                            created_at TIMESTAMP DEFAULT NOW()
                        )
                    ''')

                    # --- B·∫¢NG BOOKS (S√°ch) ---
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS books (
                            id SERIAL PRIMARY KEY,
                            title VARCHAR(255) NOT NULL,
                            author VARCHAR(255) NOT NULL,
                            category VARCHAR(100) NOT NULL,
                            year INTEGER,
                            quantity INTEGER DEFAULT 1,
                            available INTEGER DEFAULT 1,
                            image_url TEXT,
                            description TEXT,
                            created_at TIMESTAMP DEFAULT NOW()
                        )
                    ''')

                    # --- B·∫¢NG CART (Gi·ªè s√°ch - s√°ch user ƒë·ªãnh m∆∞·ª£n) ---
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS cart (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,  -- Kh√≥a ngo·∫°i ƒë·∫øn users
                            book_id INTEGER NOT NULL REFERENCES books(id) ON DELETE CASCADE,  -- Kh√≥a ngo·∫°i ƒë·∫øn books
                            added_at TIMESTAMP DEFAULT NOW(),                                 -- Th·ªùi gian th√™m v√†o gi·ªè
                            UNIQUE (user_id, book_id)  -- 1 user kh√¥ng th·ªÉ th√™m 1 s√°ch 2 l·∫ßn
                        )
                    ''')

                    # --- B·∫¢NG TRANSACTIONS (L·ªãch s·ª≠ m∆∞·ª£n tr·∫£) ---
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS transactions (
                            id SERIAL PRIMARY KEY,
                            user_id INTEGER NOT NULL REFERENCES users(id),      -- User n√†o m∆∞·ª£n
                            book_id INTEGER NOT NULL REFERENCES books(id),      -- S√°ch n√†o
                            borrow_date TIMESTAMP DEFAULT NOW(),                -- Ng√†y m∆∞·ª£n
                            due_date DATE NOT NULL,                             -- Ng√†y ph·∫£i tr·∫£
                            return_date TIMESTAMP,                              -- Ng√†y tr·∫£ th·ª±c t·∫ø (NULL n·∫øu ch∆∞a tr·∫£)
                            status VARCHAR(50) DEFAULT 'borrowed',              -- Tr·∫°ng th√°i: 'borrowed' ho·∫∑c 'returned'
                            points_earned INTEGER DEFAULT 0                     -- ƒêi·ªÉm nh·∫≠n ƒë∆∞·ª£c khi tr·∫£
                        )
                    ''')

                    # L∆∞u thay ƒë·ªïi sau khi t·∫°o b·∫£ng
                    conn.commit()

                    # T·∫°o d·ªØ li·ªáu m·∫´u
                    self.create_sample_data(cursor, conn)

                    print("[INFO] Database v√† b·∫£ng ƒë√£ s·∫µn s√†ng.")
        except psycopg2.Error as e:
            print(f"[ERROR] Kh·ªüi t·∫°o database th·∫•t b·∫°i: {e}")

    def create_sample_data(self, cursor, conn):
        """
        T·∫†O D·ªÆ LI·ªÜU M·∫™U CHO B·∫¢NG USERS V√Ä BOOKS (n·∫øu b·∫£ng tr·ªëng)
        """
        try:
            # --- TH√äM D·ªÆ LI·ªÜU CHO B·∫¢NG USERS ---
            cursor.execute("SELECT COUNT(*) FROM users")
            if cursor.fetchone()[0] == 0:
                cursor.execute('''
                    INSERT INTO users (username, password, email, role, points)
                    VALUES 
                    ('admin', 'admin123', 'admin@library.com', 'admin', 0),
                    ('user1', 'user123', 'user1@example.com', 'user', 50)
                ''')

            # --- TH√äM D·ªÆ LI·ªÜU CHO B·∫¢NG BOOKS ---
            cursor.execute("SELECT COUNT(*) FROM books")
            if cursor.fetchone()[0] == 0:
                books = [
                    ('ƒê·∫Øc Nh√¢n T√¢m', 'Dale Carnegie', 'K·ªπ nƒÉng s·ªëng', 2020, 5, 5, 'https://i.pinimg.com/1200x/1c/22/df/1c22df7132ad8f1358688b23831e9eaf.jpg', 'S√°ch v·ªÅ k·ªπ nƒÉng giao ti·∫øp'),
                    ('Sapiens', 'Yuval Noah Harari', 'L·ªãch s·ª≠', 2018, 3, 3, 'https://salt.tikicdn.com/cache/750x750/ts/product/5e/18/24/2a6154ba08df6ce6161c13f4303fa19e.jpg.webp', 'L·ªãch s·ª≠ lo√†i ng∆∞·ªùi'),
                    ('Clean Code', 'Robert C. Martin', 'C√¥ng ngh·ªá', 2019, 4, 4, 'https://m.media-amazon.com/images/I/51E2055ZGUL._SY445_SX342_.jpg', 'Vi·∫øt code s·∫°ch'),
                    ('Ho√†ng T·ª≠ B√©', 'Antoine de Saint-Exup√©ry', 'VƒÉn h·ªçc', 2015, 6, 6, 'https://i.pinimg.com/736x/73/fe/f2/73fef2d17b9f311e713bee4bcba584d7.jpg', 'Truy·ªán thi·∫øu nhi'),
                    ('Nh√† Gi·∫£ Kim', 'Paulo Coelho', 'VƒÉn h·ªçc', 2017, 5, 5, 'https://i.pinimg.com/736x/e7/9b/61/e79b615c3277569a59e312943707eeae.jpg', 'Ti·ªÉu thuy·∫øt tri·∫øt l√Ω')
                ]
                cursor.executemany('''
                    INSERT INTO books (title, author, category, year, quantity, available, image_url, description)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ''', books)

            conn.commit()
            print("[INFO] Sample data ƒë√£ ƒë∆∞·ª£c th√™m (n·∫øu b·∫£ng r·ªóng).")

        except Exception as e:
            print(f"[ERROR] T·∫°o d·ªØ li·ªáu m·∫´u th·∫•t b·∫°i: {e}")



class Person(ABC):
    """
    CLASS TR·ª™U T∆Ø·ª¢NG (ABSTRACT CLASS) - ƒê·∫†I DI·ªÜN CHO M·ªòT NG∆Ø·ªúI D√ôNG
    - ƒê√¢y l√† class cha, kh√¥ng th·ªÉ t·∫°o ƒë·ªëi t∆∞·ª£ng tr·ª±c ti·∫øp
    - C√°c class con (User, Admin) ph·∫£i k·∫ø th·ª´a v√† implement method get_permissions()
    """
    
    def __init__(self, user_id, username, email, role, points=0):
        """KH·ªûI T·∫†O: L∆∞u th√¥ng tin c∆° b·∫£n c·ªßa ng∆∞·ªùi d√πng"""
        self.user_id = user_id      # ID ng∆∞·ªùi d√πng
        self.username = username    # T√™n ƒëƒÉng nh·∫≠p
        self.email = email          # Email
        self.role = role            # Vai tr√≤: 'user' ho·∫∑c 'admin'
        self.points = points        # ƒêi·ªÉm t√≠ch l≈©y
    
    @abstractmethod
    def get_permissions(self):
        """
        METHOD TR·ª™U T∆Ø·ª¢NG: M·ªói class con ph·∫£i t·ª± ƒë·ªãnh nghƒ©a quy·ªÅn h·∫°n
        - User: ch·ªâ ƒë∆∞·ª£c m∆∞·ª£n/tr·∫£ s√°ch
        - Admin: to√†n quy·ªÅn
        """
        pass
    
    def get_info(self):
        """TR·∫¢ V·ªÄ TH√îNG TIN C∆† B·∫¢N C·ª¶A NG∆Ø·ªúI D√ôNG d∆∞·ªõi d·∫°ng dictionary"""
        return {
            'id': self.user_id,
            'username': self.username,
            'email': self.email,
            'role': self.role,
            'points': self.points
        }


class User(Person):
    """
    CLASS USER (NG∆Ø·ªúI D√ôNG TH√îNG TH∆Ø·ªúNG)
    - K·∫ø th·ª´a t·ª´ Person
    - C√≥ quy·ªÅn: xem s√°ch, th√™m v√†o gi·ªè, m∆∞·ª£n, tr·∫£ s√°ch
    """
    
    def __init__(self, user_id, username, email, points=0):
        """KH·ªûI T·∫†O: G·ªçi constructor c·ªßa class cha v·ªõi role='user'"""
        super().__init__(user_id, username, email, 'user', points)
        self.db = DatabaseManager()  # T·∫°o k·∫øt n·ªëi database
    
    def get_permissions(self):
        """QUY·ªÄN H·∫†N C·ª¶A USER: ch·ªâ ƒë∆∞·ª£c browse v√† borrow s√°ch"""
        return ['browse_books', 'borrow_books', 'return_books']
    
    def add_to_cart(self, book_id):
        """
        TH√äM S√ÅCH V√ÄO GI·ªé
        - Ki·ªÉm tra s√°ch c√≤n available kh√¥ng
        - Ki·ªÉm tra s√°ch ƒë√£ c√≥ trong gi·ªè ch∆∞a
        - Th√™m v√†o b·∫£ng cart
        """
        conn = None
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # Ki·ªÉm tra s√°ch c√≤n available kh√¥ng
            cursor.execute("SELECT available FROM books WHERE id = %s", (book_id,))
            result = cursor.fetchone()
            
            if not result or result[0] <= 0:
                return False, "S√°ch kh√¥ng c√≥ s·∫µn!"
            
            # Ki·ªÉm tra s√°ch ƒë√£ c√≥ trong gi·ªè ch∆∞a
            cursor.execute('''
                SELECT * FROM cart WHERE user_id = %s AND book_id = %s
            ''', (self.user_id, book_id))
            
            if cursor.fetchone():
                return False, "S√°ch ƒë√£ c√≥ trong gi·ªè!"
            
            # Th√™m s√°ch v√†o gi·ªè
            cursor.execute('''
                INSERT INTO cart (user_id, book_id) VALUES (%s, %s)
            ''', (self.user_id, book_id))
            
            conn.commit()
            return True, "ƒê√£ th√™m v√†o gi·ªè!"
        except Exception as e:
            if conn:
                conn.rollback()
            return False, f"L·ªói: {e}"
        finally:
            if conn:
                conn.close()
    
    def get_cart(self):
        """
        L·∫§Y DANH S√ÅCH S√ÅCH TRONG GI·ªé C·ª¶A USER
        - JOIN b·∫£ng cart v·ªõi b·∫£ng books ƒë·ªÉ l·∫•y th√¥ng tin s√°ch
        """
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT c.id, b.id, b.title, b.author, b.category, b.image_url
            FROM cart c
            JOIN books b ON c.book_id = b.id
            WHERE c.user_id = %s
        ''', (self.user_id,))
        
        cart_items = cursor.fetchall()
        conn.close()
        return cart_items
    
    def checkout(self):
        """
        THANH TO√ÅN GI·ªé H√ÄNG (M∆Ø·ª¢N T·∫§T C·∫¢ S√ÅCH TRONG GI·ªé)
        - L·∫•y t·∫•t c·∫£ book_id trong gi·ªè
        - T·∫°o transaction cho t·ª´ng s√°ch (th·ªùi h·∫°n 14 ng√†y)
        - Gi·∫£m available c·ªßa s√°ch
        - X√≥a gi·ªè h√†ng
        """
        conn = None
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # L·∫•y t·∫•t c·∫£ s√°ch trong gi·ªè
            cursor.execute("SELECT book_id FROM cart WHERE user_id = %s", (self.user_id,))
            book_ids = [row[0] for row in cursor.fetchall()]
            
            if not book_ids:
                return False, "Gi·ªè tr·ªëng!"
            
            # T√≠nh ng√†y m∆∞·ª£n v√† ng√†y ph·∫£i tr·∫£ (14 ng√†y sau)
            borrow_date = datetime.now()
            due_date = (borrow_date + timedelta(days=14)).date()
            
            # T·∫°o transaction cho t·ª´ng s√°ch
            for book_id in book_ids:
                cursor.execute('''
                    INSERT INTO transactions (user_id, book_id, due_date)
                    VALUES (%s, %s, %s)
                ''', (self.user_id, book_id, due_date))
                
                # Gi·∫£m available c·ªßa s√°ch
                cursor.execute('''
                    UPDATE books SET available = available - 1 WHERE id = %s
                ''', (book_id,))
            
            # X√≥a gi·ªè h√†ng sau khi m∆∞·ª£n
            cursor.execute("DELETE FROM cart WHERE user_id = %s", (self.user_id,))
            
            conn.commit()
            return True, f"ƒê√£ m∆∞·ª£n {len(book_ids)} cu·ªën s√°ch!"
        except Exception as e:
            if conn:
                conn.rollback()
            return False, f"L·ªói: {e}"
        finally:
            if conn:
                conn.close()
    
    def get_borrowed_books(self):
        """
        L·∫§Y DANH S√ÅCH S√ÅCH ƒêANG M∆Ø·ª¢N C·ª¶A USER
        - Ch·ªâ l·∫•y transaction c√≥ status = 'borrowed'
        """
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT t.id, b.title, b.author, t.borrow_date, t.due_date, b.image_url
            FROM transactions t
            JOIN books b ON t.book_id = b.id
            WHERE t.user_id = %s AND t.status = 'borrowed'
        ''', (self.user_id,))
        
        borrowed = cursor.fetchall()
        conn.close()
        return borrowed
    
    def return_book(self, transaction_id):
        """
        TR·∫¢ S√ÅCH
        - Ki·ªÉm tra transaction c√≥ t·ªìn t·∫°i v√† thu·ªôc user n√†y kh√¥ng
        - T√≠nh ƒëi·ªÉm: +20 n·∫øu tr·∫£ ƒë√∫ng h·∫°n, +5 n·∫øu tr·∫£ tr·ªÖ
        - C·∫≠p nh·∫≠t status = 'returned', l∆∞u return_date
        - TƒÉng available c·ªßa s√°ch
        - C·ªông ƒëi·ªÉm cho user
        """
        conn = None
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # L·∫•y th√¥ng tin transaction
            cursor.execute('''
                SELECT book_id, due_date FROM transactions
                WHERE id = %s AND user_id = %s AND status = 'borrowed'
            ''', (transaction_id, self.user_id))
            
            result = cursor.fetchone()
            if not result:
                return False, "Kh√¥ng t√¨m th·∫•y giao d·ªãch!"
            
            book_id, due_date = result
            return_date = datetime.now()
            
            # T√≠nh ƒëi·ªÉm: ƒë√∫ng h·∫°n +20, tr·ªÖ h·∫°n +5
            points = 20 if return_date.date() <= due_date else 5
            
            # C·∫≠p nh·∫≠t transaction
            cursor.execute('''
                UPDATE transactions
                SET status = 'returned', return_date = %s, points_earned = %s
                WHERE id = %s
            ''', (return_date, points, transaction_id))
            
            # TƒÉng available c·ªßa s√°ch
            cursor.execute("UPDATE books SET available = available + 1 WHERE id = %s", (book_id,))
            
            # C·ªông ƒëi·ªÉm cho user
            cursor.execute("UPDATE users SET points = points + %s WHERE id = %s", (points, self.user_id))
            
            # C·∫≠p nh·∫≠t points trong object
            self.points += points
            
            conn.commit()
            return True, f"ƒê√£ tr·∫£ s√°ch! +{points} ƒëi·ªÉm"
        except Exception as e:
            if conn:
                conn.rollback()
            return False, f"L·ªói: {e}"
        finally:
            if conn:
                conn.close()


class Admin(Person):
    """
    CLASS ADMIN (QU·∫¢N TR·ªä VI√äN)
    - K·∫ø th·ª´a t·ª´ Person
    - C√≥ to√†n quy·ªÅn: qu·∫£n l√Ω s√°ch, xem th·ªëng k√™, xem l·ªãch s·ª≠
    """
    
    def __init__(self, user_id, username, email, points=0):
        """KH·ªûI T·∫†O: G·ªçi constructor c·ªßa class cha v·ªõi role='admin'"""
        super().__init__(user_id, username, email, 'admin', points)
        self.db = DatabaseManager()
    
    def get_permissions(self):
        """QUY·ªÄN H·∫†N C·ª¶A ADMIN: to√†n quy·ªÅn"""
        return ['all']
    
    def add_book(self, title, author, category, year, quantity, image_url='', description=''):
        """
        TH√äM S√ÅCH M·ªöI V√ÄO H·ªÜ TH·ªêNG
        - available = quantity (s√°ch m·ªõi th√¨ t·∫•t c·∫£ ƒë·ªÅu available)
        """
        conn = None
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO books (title, author, category, year, quantity, available, image_url, description)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ''', (title, author, category, year, quantity, quantity, image_url, description))
            
            conn.commit()
            return True, "ƒê√£ th√™m s√°ch m·ªõi!"
        except Exception as e:
            if conn:
                conn.rollback()
            return False, f"L·ªói: {e}"
        finally:
            if conn:
                conn.close()
    
    def delete_book(self, book_id):
        """
        X√ìA S√ÅCH
        - Ki·ªÉm tra s√°ch c√≥ ƒëang ƒë∆∞·ª£c m∆∞·ª£n kh√¥ng (status='borrowed')
        - N·∫øu kh√¥ng ai m∆∞·ª£n th√¨ m·ªõi ƒë∆∞·ª£c x√≥a
        """
        conn = None
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # Ki·ªÉm tra s√°ch c√≥ ƒëang ƒë∆∞·ª£c m∆∞·ª£n kh√¥ng
            cursor.execute('''
                SELECT COUNT(*) FROM transactions
                WHERE book_id = %s AND status = 'borrowed'
            ''', (book_id,))
            
            if cursor.fetchone()[0] > 0:
                return False, "Kh√¥ng th·ªÉ x√≥a s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n!"
            
            # X√≥a s√°ch
            cursor.execute("DELETE FROM books WHERE id = %s", (book_id,))
            conn.commit()
            return True, "ƒê√£ x√≥a s√°ch!"
        except Exception as e:
            if conn:
                conn.rollback()
            return False, f"L·ªói: {e}"
        finally:
            if conn:
                conn.close()
    
    def get_statistics(self):
        """
        L·∫§Y TH·ªêNG K√ä H·ªÜ TH·ªêNG
        - T·ªïng s·ªë ƒë·∫ßu s√°ch, t·ªïng s·ªë b·∫£n, s·ªë b·∫£n available
        - S·ªë user, s·ªë l∆∞·ª£t m∆∞·ª£n hi·ªán t·∫°i
        """
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        stats = {}
        
        # Th·ªëng k√™ s√°ch
        cursor.execute("SELECT COUNT(*), COALESCE(SUM(quantity), 0), COALESCE(SUM(available), 0) FROM books")
        result = cursor.fetchone()
        stats['total_books'] = result[0]        # T·ªïng s·ªë ƒë·∫ßu s√°ch
        stats['total_copies'] = result[1]       # T·ªïng s·ªë b·∫£n
        stats['available_copies'] = result[2]   # S·ªë b·∫£n c√≥ s·∫µn
        stats['borrowed_copies'] = stats['total_copies'] - stats['available_copies']  # S·ªë b·∫£n ƒëang m∆∞·ª£n
        
        # Th·ªëng k√™ user
        cursor.execute("SELECT COUNT(*) FROM users WHERE role = 'user'")
        stats['total_users'] = cursor.fetchone()[0]
        
        # S·ªë l∆∞·ª£t m∆∞·ª£n hi·ªán t·∫°i
        cursor.execute("SELECT COUNT(*) FROM transactions WHERE status = 'borrowed'")
        stats['active_borrows'] = cursor.fetchone()[0]
        
        conn.close()
        return stats
    
    def get_all_transactions(self):
        """
        L·∫§Y L·ªäCH S·ª¨ M∆Ø·ª¢N TR·∫¢ (50 GIAO D·ªäCH G·∫¶N NH·∫§T)
        - JOIN 3 b·∫£ng: transactions, users, books
        - S·∫Øp x·∫øp theo th·ªùi gian m∆∞·ª£n (m·ªõi nh·∫•t tr∆∞·ªõc)
        """
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT u.username, b.title, t.borrow_date, t.due_date, t.return_date, t.status
            FROM transactions t
            JOIN users u ON t.user_id = u.id
            JOIN books b ON t.book_id = b.id
            ORDER BY t.borrow_date DESC
            LIMIT 50
        ''')
        
        transactions = cursor.fetchall()
        conn.close()
        return transactions

    def get_book_by_id(self, book_id):
        """
        L·∫§Y TH√îNG TIN CHI TI·∫æT M·ªòT CU·ªêN S√ÅCH
        - D√πng ƒë·ªÉ hi·ªÉn th·ªã trang chi ti·∫øt ho·∫∑c form edit
        """
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, title, author, category, year, quantity, available, image_url, description
            FROM books
            WHERE id = %s
        ''', (book_id,))
        
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return {
                'id': row[0],
                'title': row[1],
                'author': row[2],
                'category': row[3],
                'year': row[4],
                'quantity': row[5],
                'available': row[6],
                'image_url': row[7],
                'description': row[8]
            }
        return None

class LibrarySystem:
    """
    CLASS H·ªÜ TH·ªêNG TH∆Ø VI·ªÜN
    - Qu·∫£n l√Ω ƒëƒÉng k√Ω, ƒëƒÉng nh·∫≠p
    - L·∫•y danh s√°ch s√°ch
    """
    
    def __init__(self):
        """KH·ªûI T·∫†O: T·∫°o k·∫øt n·ªëi database"""
        self.db = DatabaseManager()
    
    def register(self, username, password, email):
        """
        ƒêƒÇNG K√ù T√ÄI KHO·∫¢N M·ªöI
        - M·∫∑c ƒë·ªãnh role = 'user', points = 0
        - Username ph·∫£i unique (kh√¥ng tr√πng)
        """
        conn = None
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO users (username, password, email, role, points)
                VALUES (%s, %s, %s, 'user', 0)
            ''', (username, password, email))
            
            conn.commit()
            return True, "ƒêƒÉng k√Ω th√†nh c√¥ng!"
        except errors.UniqueViolation:
            # L·ªói unique: username ƒë√£ t·ªìn t·∫°i
            if conn:
                conn.rollback()
            return False, "Username ƒë√£ t·ªìn t·∫°i!"
        except Exception as e:
            if conn:
                conn.rollback()
            return False, f"L·ªói: {e}"
        finally:
            if conn:
                conn.close()
    
    def login(self, username, password):
        """
        ƒêƒÇNG NH·∫¨P
        - Ki·ªÉm tra username v√† password
        - Tr·∫£ v·ªÅ th√¥ng tin user n·∫øu ƒë√∫ng
        """
        conn = None
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, username, email, role, points
                FROM users
                WHERE username = %s AND password = %s
            ''', (username, password))
            
            result = cursor.fetchone()
            
            if result:
                # T·∫°o dictionary ch·ª©a th√¥ng tin user
                user_dict = {
                    'id': result[0],
                    'username': result[1],
                    'email': result[2],
                    'role': result[3],
                    'points': result[4]
                }
                return user_dict, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!"
            else:
                return None, "Sai username ho·∫∑c password!"
        except Exception as e:
            return None, f"L·ªói: {e}"
        finally:
            if conn:
                conn.close()
    
    def get_all_books(self):
        """
        L·∫§Y T·∫§T C·∫¢ S√ÅCH TRONG H·ªÜ TH·ªêNG
        - S·∫Øp x·∫øp theo ng√†y th√™m (m·ªõi nh·∫•t tr∆∞·ªõc)
        - Tr·∫£ v·ªÅ d·∫°ng list of dictionaries
        """
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, title, author, category, year, quantity, available, image_url, description
            FROM books
            ORDER BY created_at DESC
        ''')
        
        rows = cursor.fetchall()
        conn.close()
        
        # Chuy·ªÉn ƒë·ªïi t·ª´ng row th√†nh dictionary
        books = []
        for row in rows:
            books.append({
                'id': row[0],
                'title': row[1],
                'author': row[2],
                'category': row[3],
                'year': row[4],
                'quantity': row[5],
                'available': row[6],
                'image_url': row[7],
                'description': row[8]
            })
        return books
        
    def get_book_by_id(self, book_id):
        """
        L·∫§Y TH√îNG TIN CHI TI·∫æT M·ªòT CU·ªêN S√ÅCH THEO ID
        """
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, title, author, category, year, quantity, available, image_url, description
            FROM books
            WHERE id = %s
        ''', (book_id,))
        
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return {
                'id': row[0],
                'title': row[1],
                'author': row[2],
                'category': row[3],
                'year': row[4],
                'quantity': row[5],
                'available': row[6],
                'image_url': row[7],
                'description': row[8]
            }
        return None


# ============================================
# PH·∫¶N 2: FLASK ROUTES (C√ÅC URL ENDPOINT)
# ============================================

# Kh·ªüi t·∫°o h·ªá th·ªëng th∆∞ vi·ªán (k·∫øt n·ªëi database)
try:
    library_system = LibrarySystem()
except ConnectionError as e:
    print(f"\nL·ªñI: {e}\n")
    exit(1)

# ============================================
# DECORATOR: KI·ªÇM TRA ƒêƒÇNG NH·∫¨P
# ============================================

def login_required(f):
    """
    DECORATOR: Y√äU C·∫¶U PH·∫¢I ƒêƒÇNG NH·∫¨P
    - D√πng cho c√°c route c·∫ßn ƒëƒÉng nh·∫≠p m·ªõi truy c·∫≠p ƒë∆∞·ª£c
    - N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p -> chuy·ªÉn v·ªÅ trang login
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user' not in session:
            flash('Vui l√≤ng ƒëƒÉng nh·∫≠p!', 'error')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    """
    DECORATOR: Y√äU C·∫¶U PH·∫¢I L√Ä ADMIN
    - D√πng cho c√°c route ch·ªâ admin m·ªõi truy c·∫≠p ƒë∆∞·ª£c
    - N·∫øu kh√¥ng ph·∫£i admin -> v·ªÅ trang ch·ªß
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user' not in session or session['user']['role'] != 'admin':
            flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!', 'error')
            return redirect(url_for('index'))
        return f(*args, **kwargs)
    return decorated_function

# ============================================
# ROUTES: TRANG CH·ª¶ V√Ä X√ÅC TH·ª∞C
# ============================================

@app.route('/')
def index():
    """
    TRANG CH·ª¶
    - N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p: chuy·ªÉn ƒë·∫øn dashboard t∆∞∆°ng ·ª©ng (user/admin)
    - N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p: hi·ªÉn th·ªã danh s√°ch s√°ch
    """
    if 'user' in session:
        if session['user']['role'] == 'admin':
            return redirect(url_for('admin_dashboard'))
        return redirect(url_for('user_dashboard'))
    
    books = library_system.get_all_books()
    return render_template('index.html', books=books)

@app.route('/book/<int:book_id>')
def book_detail(book_id):
    """
    TRANG CHI TI·∫æT S√ÅCH
    - Hi·ªÉn th·ªã th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa 1 cu·ªën s√°ch
    - Route n√†y kh·∫Øc ph·ª•c l·ªói BuildError khi click v√†o s√°ch
    """
    book = library_system.get_book_by_id(book_id)
    if not book:
        flash('Kh√¥ng t√¨m th·∫•y s√°ch!', 'error')
        return redirect(url_for('index'))

    # Render trang chi ti·∫øt s√°ch
    return render_template('book_detail.html', book=book)

@app.route('/register', methods=['GET', 'POST'])
def register():
    """
    ƒêƒÇNG K√ù T√ÄI KHO·∫¢N
    - GET: Hi·ªÉn th·ªã form ƒëƒÉng k√Ω
    - POST: X·ª≠ l√Ω ƒëƒÉng k√Ω
    """
    if request.method == 'POST':
        # L·∫•y d·ªØ li·ªáu t·ª´ form
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '').strip()
        email = request.form.get('email', '').strip()
        
        # Ki·ªÉm tra d·ªØ li·ªáu c√≥ ƒë·∫ßy ƒë·ªß kh√¥ng
        if not username or not password or not email:
            flash('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!', 'error')
            return render_template('register.html')
        
        # G·ªçi h√†m ƒëƒÉng k√Ω t·ª´ LibrarySystem
        success, message = library_system.register(username, password, email)
        
        if success:
            flash(message, 'success')
            return redirect(url_for('login'))  # Chuy·ªÉn ƒë·∫øn trang login
        else:
            flash(message, 'error')
            return render_template('register.html')
    
    # GET request: hi·ªÉn th·ªã form
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """
    ƒêƒÇNG NH·∫¨P
    - GET: Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
    - POST: X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
    """
    if request.method == 'POST':
        # L·∫•y username v√† password t·ª´ form
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '').strip()
        
        if not username or not password:
            flash('Vui l√≤ng nh·∫≠p username v√† password!', 'error')
            return render_template('login.html')
        
        # G·ªçi h√†m login t·ª´ LibrarySystem
        user_data, message = library_system.login(username, password)
        
        if user_data:
            # L∆∞u th√¥ng tin user v√†o session (gi·ªëng cookie)
            session['user'] = user_data
            flash(message, 'success')
            
            # Chuy·ªÉn h∆∞·ªõng d·ª±a v√†o role
            if user_data['role'] == 'admin':
                return redirect(url_for('admin_dashboard'))
            else:
                return redirect(url_for('user_dashboard'))
        else:
            flash(message, 'error')
            return render_template('login.html')
    
    # GET request: hi·ªÉn th·ªã form
    return render_template('login.html')

@app.route('/logout')
def logout():
    """
    ƒêƒÇNG XU·∫§T
    - X√≥a session user
    - Chuy·ªÉn v·ªÅ trang ch·ªß
    """
    session.pop('user', None)
    flash('ƒê√£ ƒëƒÉng xu·∫•t!', 'success')
    return redirect(url_for('index'))

# ============================================
# ROUTES: DASHBOARD V√Ä CH·ª®C NƒÇNG USER
# ============================================

@app.route('/user/dashboard')
@login_required
def user_dashboard():
    """
    DASHBOARD C·ª¶A USER
    - Hi·ªÉn th·ªã: gi·ªè h√†ng, s√°ch ƒëang m∆∞·ª£n, danh s√°ch s√°ch
    """
    user_info = session['user']
    # T·∫°o object User ƒë·ªÉ g·ªçi c√°c method
    user_obj = User(user_info['id'], user_info['username'], user_info['email'], user_info['points']) 
    
    cart = user_obj.get_cart()                  # Gi·ªè h√†ng
    borrowed = user_obj.get_borrowed_books()     # S√°ch ƒëang m∆∞·ª£n
    books = library_system.get_all_books()       # T·∫•t c·∫£ s√°ch
    
    return render_template('user_dashboard.html', 
                           cart=cart, 
                           borrowed=borrowed,
                           books=books,
                           user=user_info)

@app.route('/user/add-to-cart/<int:book_id>')
@login_required
def add_to_cart(book_id):
    """
    TH√äM S√ÅCH V√ÄO GI·ªé
    - G·ªçi method add_to_cart() c·ªßa User
    """
    user_info = session['user']
    user_obj = User(user_info['id'], user_info['username'], user_info['email'], user_info['points']) 
    
    success, message = user_obj.add_to_cart(book_id)
    flash(message, 'success' if success else 'error')
    
    # N·∫øu user l√† admin th√¨ v·ªÅ admin dashboard
    if user_info['role'] == 'admin':
         return redirect(url_for('admin_dashboard'))
         
    return redirect(url_for('user_dashboard'))

@app.route('/user/checkout')
@login_required
def checkout():
    """
    THANH TO√ÅN (M∆Ø·ª¢N S√ÅCH)
    - M∆∞·ª£n t·∫•t c·∫£ s√°ch trong gi·ªè
    """
    user_info = session['user']
    user_obj = User(user_info['id'], user_info['username'], user_info['email'], user_info['points']) 
    
    success, message = user_obj.checkout()
    flash(message, 'success' if success else 'error')
    
    return redirect(url_for('user_dashboard'))

@app.route('/user/return/<int:transaction_id>')
@login_required
def return_book(transaction_id):
    """
    TR·∫¢ S√ÅCH
    - Tr·∫£ s√°ch theo transaction_id
    - C·∫≠p nh·∫≠t points trong session sau khi tr·∫£
    """
    user_info = session['user']
    user_obj = User(user_info['id'], user_info['username'], user_info['email'], user_info['points'])
    
    success, message = user_obj.return_book(transaction_id)
    
    if success:
        # C·∫≠p nh·∫≠t points trong session
        session['user']['points'] = user_obj.points
    
    flash(message, 'success' if success else 'error')
    return redirect(url_for('user_dashboard'))

# ============================================
# ROUTES: DASHBOARD V√Ä CH·ª®C NƒÇNG ADMIN
# ============================================

@app.route('/admin/dashboard')
@admin_required
def admin_dashboard():
    """
    DASHBOARD C·ª¶A ADMIN
    - Hi·ªÉn th·ªã: th·ªëng k√™, danh s√°ch s√°ch, l·ªãch s·ª≠ giao d·ªãch
    """
    user_info = session['user']
    # T·∫°o object Admin ƒë·ªÉ g·ªçi c√°c method
    admin_obj = Admin(user_info['id'], user_info['username'], user_info['email'], user_info['points'])
    
    stats = admin_obj.get_statistics()          # Th·ªëng k√™
    books = library_system.get_all_books()       # Danh s√°ch s√°ch
    transactions = admin_obj.get_all_transactions()  # L·ªãch s·ª≠
    
    return render_template('admin_dashboard.html',
                           stats=stats,
                           books=books,
                           transactions=transactions,
                           user=user_info)

@app.route('/admin/add-book', methods=['POST'])
@admin_required
def admin_add_book():
    """
    TH√äM S√ÅCH M·ªöI (ADMIN)
    - L·∫•y d·ªØ li·ªáu t·ª´ form
    - G·ªçi method add_book() c·ªßa Admin
    """
    user_info = session['user']
    admin_obj = Admin(user_info['id'], user_info['username'], user_info['email'], user_info['points'])
    
    # L·∫•y d·ªØ li·ªáu t·ª´ form
    title = request.form.get('title', '').strip()
    author = request.form.get('author', '').strip()
    category = request.form.get('category', '').strip()
    year = int(request.form.get('year', 2024))
    quantity = int(request.form.get('quantity', 1))
    image_url = request.form.get('image_url', '').strip()
    description = request.form.get('description', '').strip()
    
    # Validate d·ªØ li·ªáu
    if not title or not author or not category or quantity <= 0:
        flash('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß Title, Author, Category v√† Quantity > 0.', 'error')
        return redirect(url_for('admin_dashboard'))
        
    success, message = admin_obj.add_book(title, author, category, year, quantity, image_url, description)
    flash(message, 'success' if success else 'error')
    
    return redirect(url_for('admin_dashboard'))

@app.route('/admin/delete-book/<int:book_id>')
@admin_required
def admin_delete_book(book_id):
    """
    X√ìA S√ÅCH (ADMIN)
    - G·ªçi method delete_book() c·ªßa Admin
    """
    user_info = session['user']
    admin_obj = Admin(user_info['id'], user_info['username'], user_info['email'], user_info['points'])
    
    success, message = admin_obj.delete_book(book_id)
    flash(message, 'success' if success else 'error')
    
    return redirect(url_for('admin_dashboard'))

@app.route('/admin/add_stock/<int:book_id>', methods=['POST'])
# @admin_required  # B·ªè comment n·∫øu mu·ªën y√™u c·∫ßu quy·ªÅn Admin
def admin_add_stock(book_id):
    """
    TH√äM S·ªê L∆Ø·ª¢NG S√ÅCH V√ÄO KHO
    - TƒÉng c·∫£ quantity (t·ªïng s·ªë) v√† available (c√≥ s·∫µn)
    - D√πng khi nh·∫≠p th√™m s√°ch v√†o th∆∞ vi·ªán
    """
    conn = None 
    try:
        # 1. L·∫•y s·ªë l∆∞·ª£ng mu·ªën th√™m t·ª´ form (input name="quantity_added")
        quantity_to_add = int(request.form.get('quantity_added', 0))
    except ValueError:
        flash('L·ªói: S·ªë l∆∞·ª£ng th√™m v√†o ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá.', 'error')
        return redirect(url_for('admin_dashboard'))

    # Ki·ªÉm tra s·ªë l∆∞·ª£ng ph·∫£i > 0
    if quantity_to_add <= 0:
        flash('Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng l·ªõn h∆°n 0.', 'error')
        return redirect(url_for('admin_dashboard'))

    try:
        # K·∫øt n·ªëi database
        conn = library_system.db.get_connection()
        cursor = conn.cursor()
        
        # 2. L·ªÜNH SQL C·∫¨P NH·∫¨T KHO S√ÅCH
        # TƒÉng c·∫£ T·ªîNG S·ªê L∆Ø·ª¢NG (quantity) v√† S·∫¥N C√ì (available)
        cursor.execute(
            """
            UPDATE books 
            SET quantity = quantity + %s, 
                available = available + %s
            WHERE id = %s;
            """, 
            (quantity_to_add, quantity_to_add, book_id)
        )
        conn.commit()  # B·∫ÆT BU·ªòC: L∆∞u thay ƒë·ªïi v√†o database
        
        # L·∫•y t√™n s√°ch ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
        cursor.execute("SELECT title FROM books WHERE id = %s", (book_id,))
        book_title = cursor.fetchone()[0] if cursor.rowcount else f'ID: {book_id}'
        
        flash(f'ƒê√£ th√™m {quantity_to_add} cu·ªën v√†o kho s√°ch "{book_title}" th√†nh c√¥ng!', 'success')
        
    except Exception as e:
        if conn:
            conn.rollback()  # Ho√†n t√°c n·∫øu c√≥ l·ªói
        flash(f'L·ªói h·ªá th·ªëng ho·∫∑c database khi th√™m s·ªë l∆∞·ª£ng: {e}', 'error')
        
    finally:
        # ƒê√≥ng k·∫øt n·ªëi database
        if conn:
            cursor.close()
            conn.close() 

    return redirect(url_for('admin_dashboard'))

#===========================================
# T√åM KI·∫æM S√ÅCH
#===========================================
@app.route('/search', methods=['GET', 'POST'])
def search_books():
    query = ''
    results = []
    conn = None
    cursor = None  # ‚úÖ ƒë·∫£m b·∫£o bi·∫øn n√†y lu√¥n t·ªìn t·∫°i

    if request.method == 'POST':
        query = request.form.get('query', '').strip()
        if not query:
            flash('Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!', 'error')
            return redirect(url_for('search_books'))

        try:
            # ‚úÖ K·∫øt n·ªëi database PostgreSQL
            conn = library_system.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)

            # ‚úÖ T√¨m theo t√™n, t√°c gi·∫£, ho·∫∑c nƒÉm
            sql = """
                SELECT * FROM books
                WHERE title ILIKE %s
                OR author ILIKE %s
                OR CAST(year AS TEXT) ILIKE %s
                ORDER BY title ASC
            """
            values = (f'%{query}%', f'%{query}%', f'%{query}%')
            cursor.execute(sql, values)
            results = cursor.fetchall()

            if not results:
                flash(f'Kh√¥ng t√¨m th·∫•y s√°ch n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a "{query}"!', 'info')


        except Exception as e:
            flash(f'L·ªói khi t√¨m ki·∫øm s√°ch: {e}', 'error')

        finally:
            # ‚úÖ Ch·ªâ ƒë√≥ng n·∫øu th·ª±c s·ª± t·ªìn t·∫°i
            if cursor is not None:
                try:
                    cursor.close()
                except:
                    pass
            if conn is not None:
                try:
                    conn.close()
                except:
                    pass

    return render_template('search.html', query=query, results=results)


# ============================================
# KH·ªûI CH·∫†Y ·ª®NG D·ª§NG
# ============================================

if __name__ == '__main__':
    print("="*60)
    print("  H·ªÜ TH·ªêNG TH∆Ø VI·ªÜN - FLASK + POSTGRESQL + OOP")
    print("="*60)
    print("\n‚úÖ Server: http://127.0.0.1:5000")
    print("\nüìå T√†i kho·∫£n m·∫´u:")
    print("   Admin: admin / admin123")
    print("   User:  user1 / user123")
    print("="*60)
    
    # Ch·∫°y Flask server
    # debug=True: t·ª± ƒë·ªông reload khi code thay ƒë·ªïi
    # port=5000: ch·∫°y tr√™n c·ªïng 5000
    app.run(debug=True, port=5000)